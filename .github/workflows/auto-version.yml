name: Auto Version & Cache Update

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  version-and-update:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Get current version
      id: current_version
      run: |
        if [ -f package.json ]; then
          VERSION=$(node -p "require('./package.json').version")
        else
          # If no package.json, start with 1.0.0
          VERSION="1.0.0"
        fi
        echo "current=$VERSION" >> $GITHUB_OUTPUT
        echo "Current version: $VERSION"

    - name: Determine version bump type
      id: version_bump
      run: |
        # Check commit message for version bump indicators
        COMMIT_MSG="${{ github.event.head_commit.message }}"
        echo "Commit message: $COMMIT_MSG"
        
        if echo "$COMMIT_MSG" | grep -qE "^(feat|feature)(\(.+\))?!:|^[^:]+!:|BREAKING CHANGE:"; then
          echo "type=major" >> $GITHUB_OUTPUT
          echo "Version bump: MAJOR (breaking change detected)"
        elif echo "$COMMIT_MSG" | grep -qE "^feat(\(.+\))?:|^feature(\(.+\))?:"; then
          echo "type=minor" >> $GITHUB_OUTPUT
          echo "Version bump: MINOR (new feature detected)"
        elif echo "$COMMIT_MSG" | grep -qE "^(fix|bug|hotfix|patch)(\(.+\))?:|^perf(\(.+\))?:"; then
          echo "type=patch" >> $GITHUB_OUTPUT
          echo "Version bump: PATCH (fix detected)"
        elif echo "$COMMIT_MSG" | grep -qE "^(docs|style|refactor|test|chore)(\(.+\))?:"; then
          echo "type=patch" >> $GITHUB_OUTPUT
          echo "Version bump: PATCH (maintenance detected)"
        else
          echo "type=patch" >> $GITHUB_OUTPUT
          echo "Version bump: PATCH (default)"
        fi

    - name: Calculate new version
      id: new_version
      run: |
        CURRENT="${{ steps.current_version.outputs.current }}"
        BUMP_TYPE="${{ steps.version_bump.outputs.type }}"
        
        # Parse current version
        IFS='.' read -ra VERSION_PARTS <<< "$CURRENT"
        MAJOR=${VERSION_PARTS[0]}
        MINOR=${VERSION_PARTS[1]}
        PATCH=${VERSION_PARTS[2]}
        
        # Increment based on bump type
        case $BUMP_TYPE in
          major)
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
            ;;
          minor)
            MINOR=$((MINOR + 1))
            PATCH=0
            ;;
          patch)
            PATCH=$((PATCH + 1))
            ;;
        esac
        
        NEW_VERSION="$MAJOR.$MINOR.$PATCH"
        echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "New version: $NEW_VERSION"

    - name: Update package.json
      run: |
        NEW_VERSION="${{ steps.new_version.outputs.version }}"
        
        # Create package.json if it doesn't exist
        if [ ! -f package.json ]; then
          cat > package.json << EOF
        {
          "name": "brandmeister-monitor",
          "version": "$NEW_VERSION",
          "description": "Real-time DMR Talkgroup Activity Monitor for Brandmeister Network",
          "main": "index.html",
          "scripts": {
            "update-version": "node update-version.js"
          },
          "repository": {
            "type": "git",
            "url": "https://github.com/${{ github.repository }}.git"
          },
          "author": "${{ github.actor }}",
          "license": "MIT"
        }
        EOF
        else
          # Update existing package.json version
          node -e "
            const fs = require('fs');
            const pkg = JSON.parse(fs.readFileSync('package.json', 'utf8'));
            pkg.version = '$NEW_VERSION';
            fs.writeFileSync('package.json', JSON.stringify(pkg, null, 2) + '\n');
          "
        fi
        
        echo "Updated package.json to version $NEW_VERSION"

    - name: Update service worker cache version
      run: |
        NEW_VERSION="${{ steps.new_version.outputs.version }}"
        
        # Update service worker cache name
        if [ -f js/sw.js ]; then
          sed -i "s/CACHE_NAME = 'brandmeister-monitor-v[0-9]*\.[0-9]*\.[0-9]*'/CACHE_NAME = 'brandmeister-monitor-v$NEW_VERSION'/g" js/sw.js
          sed -i "s/Installing service worker v[0-9]*\.[0-9]*\.[0-9]*/Installing service worker v$NEW_VERSION/g" js/sw.js
          sed -i "s/Activating service worker v[0-9]*\.[0-9]*\.[0-9]*/Activating service worker v$NEW_VERSION/g" js/sw.js
          echo "Updated service worker to version $NEW_VERSION"
        fi

    - name: Update manifest.json version
      run: |
        NEW_VERSION="${{ steps.new_version.outputs.version }}"
        
        if [ -f manifest.json ]; then
          node -e "
            const fs = require('fs');
            const manifest = JSON.parse(fs.readFileSync('manifest.json', 'utf8'));
            manifest.version = '$NEW_VERSION';
            fs.writeFileSync('manifest.json', JSON.stringify(manifest, null, 2) + '\n');
          "
          echo "Updated manifest.json to version $NEW_VERSION"
        fi

    - name: Create git tag
      run: |
        NEW_VERSION="${{ steps.new_version.outputs.version }}"
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git tag -a "v$NEW_VERSION" -m "Auto-generated version v$NEW_VERSION"
        echo "Created tag v$NEW_VERSION"

    - name: Commit version updates
      run: |
        NEW_VERSION="${{ steps.new_version.outputs.version }}"
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Add files if there are changes
        git add package.json js/sw.js manifest.json 2>/dev/null || true
        
        # Check if there are changes to commit
        if git diff --staged --quiet; then
          echo "No version changes to commit"
        else
          git commit -m "chore: bump version to v$NEW_VERSION [skip ci]"
          echo "Committed version bump to v$NEW_VERSION"
        fi

    - name: Push changes and tags
      if: github.event_name == 'push'
      run: |
        git push origin main
        git push origin --tags
        echo "Pushed changes and tags to repository"

    - name: Create GitHub Release
      if: github.event_name == 'push'
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.new_version.outputs.version }}
        release_name: Release v${{ steps.new_version.outputs.version }}
        body: |
          ## Release v${{ steps.new_version.outputs.version }}
          
          **Auto-generated release from commit:** ${{ github.event.head_commit.message }}
          
          ### Changes
          - Service Worker cache updated to v${{ steps.new_version.outputs.version }}
          - PWA version bumped for automatic updates
          
          ### Commit Details
          - **Commit:** ${{ github.sha }}
          - **Author:** ${{ github.event.head_commit.author.name }}
          - **Date:** ${{ github.event.head_commit.timestamp }}
        draft: false
        prerelease: false

    - name: Summary
      run: |
        echo "## Version Update Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Previous Version:** ${{ steps.current_version.outputs.current }}" >> $GITHUB_STEP_SUMMARY
        echo "- **New Version:** ${{ steps.new_version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Bump Type:** ${{ steps.version_bump.outputs.type }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit Message:** ${{ github.event.head_commit.message }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Files Updated:** package.json, js/sw.js, manifest.json" >> $GITHUB_STEP_SUMMARY
        echo "- **Git Tag Created:** v${{ steps.new_version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "- **GitHub Release:** Created" >> $GITHUB_STEP_SUMMARY